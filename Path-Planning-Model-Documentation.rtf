{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww16160\viewh11240\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 Path Planning - Model Design
\b0\fs24 \
\
The goal of this project is to design a path planning algorithm that allows a vehicle to navigate on a track conforming to certain rules. Path planning algorithm determines the path that vehicle has to follow subject to few conditions like speed, jerk limits, staying in the lane and without any collisions.\
\

\b Design:
\b0 \
Model makes use of initial position of car along with anchor points along the road(s-dimension of Frenet coordinate system). We make use of these points along with spline to determine the actual trajectory that vehicle will traverse. In order to make the vehicle transition smoothly between different time intervals, we make use of the previous path points calculated in the earlier steps.\
\

\b Step1(Anchor Points):
\b0 \
In this step, we use previous path\'92s last 2 points, if available, otherwise, use car\'92s position and create another point along the path. We also generate few points that are spaced 30 meters apart along the road(s-dimension of Frenet coordinate system). These points will be used as anchor points to generate actual trajectory(using spline library) subject to conditions to avoid jerk. We will translate the points to vehicle\'92s local coordinate system for simplification purposes.\
 \

\b Step 2(Trajectory Generation Using Spline For Jerk Minimization):
\b0 \
We made use of spline library that will generate a desired number of points (based on speed we would like to drive the vehicle) based on anchor points generated above. We begin from origin (in car\'92s coordinate system) and pick a point that is 30m away along the X-axis and y is determined from the spline set. The distance between the points is computed and equally divided into \'92N\'92 segments. N is dependent on the distance and speed with which the vehicle will move. We divide the distance along X-axis between 2 points into N equal segments and then using spline determine the y values. These points will form the trajectory after they are converted to global coordinates(from car\'92s local coordinates).\
\

\b Step 3(Collision Detection & Avoidance):
\b0 \
We check whether any vehicle is too close(less than 30m ahead or 10m behind) to our vehicle. We will evaluate the proximity check for all lanes and determine whether to move forward in same lane or slow down or change lane to the left/right.}